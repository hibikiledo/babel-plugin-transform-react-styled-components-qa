// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`custom attrubute 1. babel-plugin-transform-react-styled-components-qa: 1. babel-plugin-transform-react-styled-components-qa 1`] = `
"
/* eslint-disable */

// without attrs at ( standard html tags )
const AwesomeComponent = styled.div\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( standard html tags )
const RockyMountain = styled.div.attrs({
	underlined: true,
	accentColor: 'red',
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// without attrs ( computed tag )
const CoverImage = styled[tag]\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( computed tag )
const RandomName = styled[tag].attrs({
	underlined: true,
	accentColor: 'blue',
})\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsObject = styled.div.attrs(props => ({
	underlined: props.underlined,
	accentColor: 'red',
}))\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsBlock = styled.div.attrs(props => {
    return {
        underlined: props.underlined,
        accentColor: 'red',
    }
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
// without attrs at ( standard html tags )
const AwesomeComponent = styled.div.attrs(props => {
  return {
    \\"data-wn-qa\\": props[\\"data-wn-qa\\"] || \\"awesome-component\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( standard html tags )

const RockyMountain = styled.div.attrs(props => {
  return {
    underlined: true,
    accentColor: 'red',
    \\"data-wn-qa\\": props[\\"data-wn-qa\\"] || \\"rocky-mountain\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // without attrs ( computed tag )

const CoverImage = styled[tag].attrs(props => {
  return {
    \\"data-wn-qa\\": props[\\"data-wn-qa\\"] || \\"cover-image\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( computed tag )

const RandomName = styled[tag].attrs(props => {
  return {
    underlined: true,
    accentColor: 'blue',
    \\"data-wn-qa\\": props[\\"data-wn-qa\\"] || \\"random-name\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsObject = styled.div.attrs(props => ({
  underlined: props.underlined,
  accentColor: 'red',
  \\"data-wn-qa\\": props[\\"data-wn-qa\\"] || \\"dynamic-attrs-object\\"
}))\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsBlock = styled.div.attrs(props => {
  return {
    underlined: props.underlined,
    accentColor: 'red',
    \\"data-wn-qa\\": props[\\"data-wn-qa\\"] || \\"dynamic-attrs-block\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`;
"
`;

exports[`format camel 1. babel-plugin-transform-react-styled-components-qa: 1. babel-plugin-transform-react-styled-components-qa 1`] = `
"
/* eslint-disable */

// without attrs at ( standard html tags )
const AwesomeComponent = styled.div\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( standard html tags )
const RockyMountain = styled.div.attrs({
	underlined: true,
	accentColor: 'red',
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// without attrs ( computed tag )
const CoverImage = styled[tag]\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( computed tag )
const RandomName = styled[tag].attrs({
	underlined: true,
	accentColor: 'blue',
})\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsObject = styled.div.attrs(props => ({
	underlined: props.underlined,
	accentColor: 'red',
}))\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsBlock = styled.div.attrs(props => {
    return {
        underlined: props.underlined,
        accentColor: 'red',
    }
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
// without attrs at ( standard html tags )
const AwesomeComponent = styled.div.attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"awesomeComponent\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( standard html tags )

const RockyMountain = styled.div.attrs(props => {
  return {
    underlined: true,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"rockyMountain\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // without attrs ( computed tag )

const CoverImage = styled[tag].attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"coverImage\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( computed tag )

const RandomName = styled[tag].attrs(props => {
  return {
    underlined: true,
    accentColor: 'blue',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"randomName\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsObject = styled.div.attrs(props => ({
  underlined: props.underlined,
  accentColor: 'red',
  \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamicAttrsObject\\"
}))\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsBlock = styled.div.attrs(props => {
  return {
    underlined: props.underlined,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamicAttrsBlock\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`;
"
`;

exports[`format kebab 1. babel-plugin-transform-react-styled-components-qa: 1. babel-plugin-transform-react-styled-components-qa 1`] = `
"
/* eslint-disable */

// without attrs at ( standard html tags )
const AwesomeComponent = styled.div\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( standard html tags )
const RockyMountain = styled.div.attrs({
	underlined: true,
	accentColor: 'red',
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// without attrs ( computed tag )
const CoverImage = styled[tag]\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( computed tag )
const RandomName = styled[tag].attrs({
	underlined: true,
	accentColor: 'blue',
})\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsObject = styled.div.attrs(props => ({
	underlined: props.underlined,
	accentColor: 'red',
}))\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsBlock = styled.div.attrs(props => {
    return {
        underlined: props.underlined,
        accentColor: 'red',
    }
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
// without attrs at ( standard html tags )
const AwesomeComponent = styled.div.attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"awesome-component\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( standard html tags )

const RockyMountain = styled.div.attrs(props => {
  return {
    underlined: true,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"rocky-mountain\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // without attrs ( computed tag )

const CoverImage = styled[tag].attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"cover-image\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( computed tag )

const RandomName = styled[tag].attrs(props => {
  return {
    underlined: true,
    accentColor: 'blue',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"random-name\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsObject = styled.div.attrs(props => ({
  underlined: props.underlined,
  accentColor: 'red',
  \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamic-attrs-object\\"
}))\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsBlock = styled.div.attrs(props => {
  return {
    underlined: props.underlined,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamic-attrs-block\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`;
"
`;

exports[`format pascal 1. babel-plugin-transform-react-styled-components-qa: 1. babel-plugin-transform-react-styled-components-qa 1`] = `
"
/* eslint-disable */

// without attrs at ( standard html tags )
const AwesomeComponent = styled.div\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( standard html tags )
const RockyMountain = styled.div.attrs({
	underlined: true,
	accentColor: 'red',
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// without attrs ( computed tag )
const CoverImage = styled[tag]\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( computed tag )
const RandomName = styled[tag].attrs({
	underlined: true,
	accentColor: 'blue',
})\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsObject = styled.div.attrs(props => ({
	underlined: props.underlined,
	accentColor: 'red',
}))\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsBlock = styled.div.attrs(props => {
    return {
        underlined: props.underlined,
        accentColor: 'red',
    }
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
// without attrs at ( standard html tags )
const AwesomeComponent = styled.div.attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"AwesomeComponent\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( standard html tags )

const RockyMountain = styled.div.attrs(props => {
  return {
    underlined: true,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"RockyMountain\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // without attrs ( computed tag )

const CoverImage = styled[tag].attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"CoverImage\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( computed tag )

const RandomName = styled[tag].attrs(props => {
  return {
    underlined: true,
    accentColor: 'blue',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"RandomName\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsObject = styled.div.attrs(props => ({
  underlined: props.underlined,
  accentColor: 'red',
  \\"data-qa\\": props[\\"data-qa\\"] || \\"DynamicAttrsObject\\"
}))\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsBlock = styled.div.attrs(props => {
  return {
    underlined: props.underlined,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"DynamicAttrsBlock\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`;
"
`;

exports[`format snake 1. babel-plugin-transform-react-styled-components-qa: 1. babel-plugin-transform-react-styled-components-qa 1`] = `
"
/* eslint-disable */

// without attrs at ( standard html tags )
const AwesomeComponent = styled.div\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( standard html tags )
const RockyMountain = styled.div.attrs({
	underlined: true,
	accentColor: 'red',
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// without attrs ( computed tag )
const CoverImage = styled[tag]\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( computed tag )
const RandomName = styled[tag].attrs({
	underlined: true,
	accentColor: 'blue',
})\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsObject = styled.div.attrs(props => ({
	underlined: props.underlined,
	accentColor: 'red',
}))\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsBlock = styled.div.attrs(props => {
    return {
        underlined: props.underlined,
        accentColor: 'red',
    }
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
// without attrs at ( standard html tags )
const AwesomeComponent = styled.div.attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"awesome_component\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( standard html tags )

const RockyMountain = styled.div.attrs(props => {
  return {
    underlined: true,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"rocky_mountain\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // without attrs ( computed tag )

const CoverImage = styled[tag].attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"cover_image\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( computed tag )

const RandomName = styled[tag].attrs(props => {
  return {
    underlined: true,
    accentColor: 'blue',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"random_name\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsObject = styled.div.attrs(props => ({
  underlined: props.underlined,
  accentColor: 'red',
  \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamic_attrs_object\\"
}))\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsBlock = styled.div.attrs(props => {
  return {
    underlined: props.underlined,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamic_attrs_block\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`;
"
`;

exports[`without plugin options 1. babel-plugin-transform-react-styled-components-qa: 1. babel-plugin-transform-react-styled-components-qa 1`] = `
"
/* eslint-disable */

// without attrs at ( standard html tags )
const AwesomeComponent = styled.div\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( standard html tags )
const RockyMountain = styled.div.attrs({
	underlined: true,
	accentColor: 'red',
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// without attrs ( computed tag )
const CoverImage = styled[tag]\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with attrs ( computed tag )
const RandomName = styled[tag].attrs({
	underlined: true,
	accentColor: 'blue',
})\`
	width: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsObject = styled.div.attrs(props => ({
	underlined: props.underlined,
	accentColor: 'red',
}))\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

// with dynamic attrs ( standard html tags )
const DynamicAttrsBlock = styled.div.attrs(props => {
    return {
        underlined: props.underlined,
        accentColor: 'red',
    }
})\`
	font-size: 12px;
	border-bottom: \${props => (props.underlined ? '1px solid' : none)};
\`

      ↓ ↓ ↓ ↓ ↓ ↓

/* eslint-disable */
// without attrs at ( standard html tags )
const AwesomeComponent = styled.div.attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"awesome-component\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( standard html tags )

const RockyMountain = styled.div.attrs(props => {
  return {
    underlined: true,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"rocky-mountain\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // without attrs ( computed tag )

const CoverImage = styled[tag].attrs(props => {
  return {
    \\"data-qa\\": props[\\"data-qa\\"] || \\"cover-image\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with attrs ( computed tag )

const RandomName = styled[tag].attrs(props => {
  return {
    underlined: true,
    accentColor: 'blue',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"random-name\\"
  };
})\`
	width: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsObject = styled.div.attrs(props => ({
  underlined: props.underlined,
  accentColor: 'red',
  \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamic-attrs-object\\"
}))\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`; // with dynamic attrs ( standard html tags )

const DynamicAttrsBlock = styled.div.attrs(props => {
  return {
    underlined: props.underlined,
    accentColor: 'red',
    \\"data-qa\\": props[\\"data-qa\\"] || \\"dynamic-attrs-block\\"
  };
})\`
	font-size: 12px;
	border-bottom: \${props => props.underlined ? '1px solid' : none};
\`;
"
`;
